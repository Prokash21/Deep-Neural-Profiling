# Make gene symbols unique to avoid rowname conflict
unique_symbols <- make.unique(gene_symbols)
# Assign back as row names
rownames(count_data) <- unique_symbols
# Check result
head(rownames(count_data))
View(count_data)
colnames(count_data)
setwd("E:/DWCT/Papia Mam/Cancer/GitHub/Cancer_Project_BMU/RUN/HNSCC/R/GSE178537")
# Replace colnames of count_data with GSM IDs
colnames(count_data) <- meta$sample_names <- meta$sample_names  # for safety
if (!requireNamespace("readxl")) install.packages("readxl")
library(readxl)
meta <- read_excel("meta_data_GSE178537.xlsx")
# View to confirm structure
head(meta)
# Ensure order matches between metadata and count data
meta <- meta[match(colnames(count_data), meta$sample_names), ]
# Replace colnames of count_data with GSM IDs
colnames(count_data) <- meta$sample_names <- meta$sample_names  # for safety
colnames(count_data) <- meta$sample_names <- meta$sample_names
colnames(count_data) <- meta$sample_names
colnames(count_data) <- meta$sample_names
colnames(count_data) <- meta$sample_names
colnames(count_data) <- meta$sample_names <- meta$sample_names
colnames(count_data) <- meta$sample_names
colnames(count_data) <- meta$sample_names
colnames(count_data) <- meta$sample_names
View(count_data)
# Extract type from the sample name (e.g., "1-N" → "N", "44-IT" → "IT")
meta$sample_type <- sapply(strsplit(meta$condition, "-"), `[`, 2)
View(meta)
View(meta)
View(count_matrix)
View(count_data)
# If not already unzipped, you can unzip the file first
gunzip("GSE178537_expected_counts.txt.gz", overwrite = TRUE)
# Now read the unzipped file
count_data <- fread("GSE178537_expected_counts.txt")
# Preview the first few rows
head(count_data)
# Set the first column (gene names) as rownames
gene_names <- count_data[[1]]                # extract gene names
count_data <- count_data[, -1, with = FALSE] # remove gene name column
rownames(count_data) <- gene_names
# Check dimensions
dim(count_data)
# Assuming your count_data is already read and rownames are like:
# Extract gene symbols only (after "_")
gene_symbols <- sapply(strsplit(rownames(count_data), "_"), `[`, 2)
# Make gene symbols unique to avoid rowname conflict
unique_symbols <- make.unique(gene_symbols)
# Assign back as row names
rownames(count_data) <- unique_symbols
# Check result
head(rownames(count_data))
write.csv(count_data, file = "count_data_GSE178537.csv")
# Now read the unzipped file
count_data <- fread("GSE178537_expected_counts.txt")
# Preview the first few rows
head(count_data)
# Set the first column (gene names) as rownames
gene_names <- count_data[[1]]                # extract gene names
count_data <- count_data[, -1, with = FALSE] # remove gene name column
rownames(count_data) <- gene_names
# Check dimensions
dim(count_data)
# Assuming your count_data is already read and rownames are like:
# Extract gene symbols only (after "_")
gene_symbols <- sapply(strsplit(rownames(count_data), "_"), `[`, 2)
# Make gene symbols unique to avoid rowname conflict
unique_symbols <- make.unique(gene_symbols)
# Assign back as row names
rownames(count_data) <- unique_symbols
# Step 2: Find duplicated gene symbols
duplicates <- duplicated(gene_symbols)
# Step 3: Filter out duplicated rows
count_data <- count_data[!duplicates, ]
# Step 4: Assign gene symbols as rownames
rownames(count_data) <- gene_symbols[!duplicates]
# Step 2 (extended): Find duplicated gene symbols (including all occurrences)
dup_symbols <- gene_symbols[duplicated(gene_symbols) | duplicated(gene_symbols, fromLast = TRUE)]
# Step 3 (optional): See unique duplicated names
unique_dup_symbols <- unique(dup_symbols)
# View first few
head(unique_dup_symbols)
# Assuming your count_data is already read and rownames are like:
# Extract gene symbols only (after "_")
gene_symbols <- sapply(strsplit(rownames(count_data), "_"), `[`, 2)
# Make gene symbols unique to avoid rowname conflict
unique_symbols <- make.unique(gene_symbols)
# Assign back as row names
rownames(count_data) <- unique_symbols
# Check result
head(rownames(count_data))
# Now read the unzipped file
count_data <- fread("GSE178537_expected_counts.txt")
# Preview the first few rows
head(count_data)
# Set the first column (gene names) as rownames
gene_names <- count_data[[1]]                # extract gene names
count_data <- count_data[, -1, with = FALSE] # remove gene name column
rownames(count_data) <- gene_names
# Check dimensions
dim(count_data)
# Assuming your count_data is already read and rownames are like:
# Extract gene symbols only (after "_")
gene_symbols <- sapply(strsplit(rownames(count_data), "_"), `[`, 2)
# Make gene symbols unique to avoid rowname conflict
unique_symbols <- make.unique(gene_symbols)
# Assign back as row names
rownames(count_data) <- unique_symbols
# Check result
head(rownames(count_data))
# Step 1: Extract Ensembl IDs (before "_") and Gene Symbols (after "_")
ensembl_ids <- sapply(strsplit(rownames(count_data), "_"), `[`, 1)
gene_symbols <- sapply(strsplit(rownames(count_data), "_"), `[`, 2)
# Step 2: Make gene symbols unique
unique_symbols <- make.unique(gene_symbols)
# Step 3: Assign unique gene symbols as new rownames
rownames(count_data) <- unique_symbols
# Now read the unzipped file
count_data <- fread("GSE178537_expected_counts.txt")
# Preview the first few rows
head(count_data)
# Set the first column (gene names) as rownames
gene_names <- count_data[[1]]                # extract gene names
count_data <- count_data[, -1, with = FALSE] # remove gene name column
rownames(count_data) <- gene_names
# Check dimensions
dim(count_data)
# Step 1: Extract Ensembl IDs (before "_") and Gene Symbols (after "_")
ensembl_ids <- sapply(strsplit(rownames(count_data), "_"), `[`, 1)
gene_symbols <- sapply(strsplit(rownames(count_data), "_"), `[`, 2)
# Step 2: Make gene symbols unique
unique_symbols <- make.unique(gene_symbols)
# Step 3: Assign unique gene symbols as new rownames
rownames(count_data) <- unique_symbols
# Step 4: Create a new data frame to store Ensembl ID, Gene Symbol, and counts
output_df <- data.frame(
Ensembl_ID = ensembl_ids,
Gene_Symbol = unique_symbols,
count_data,
check.names = FALSE
)
# Step 5: Save as CSV
write.csv(output_df, "count_data_with_ids.csv", row.names = FALSE)
# ---- 5. Load the count data ----
count_data <- fread("GSE178537_expected_counts.txt")
# ---- 6. Process gene IDs ----
# Extract gene names column
gene_names <- count_data[[1]]
# Remove gene name column from data
count_data <- count_data[, -1, with = FALSE]
# Assign gene names as rownames
rownames(count_data) <- gene_names
# ---- 7. Extract Ensembl IDs and Gene Symbols ----
ensembl_ids <- sapply(strsplit(gene_names, "_"), `[`, 1)
gene_symbols <- sapply(strsplit(gene_names, "_"), `[`, 2)
# Make gene symbols unique to avoid conflicts
unique_symbols <- make.unique(gene_symbols)
# Assign unique gene symbols as row names
rownames(count_data) <- unique_symbols
# ---- 8. Combine metadata and count matrix ----
output_df <- data.frame(
Ensembl_ID = ensembl_ids,
Gene_Symbol = unique_symbols,
count_data,
check.names = FALSE
)
View(count_data)
setwd("E:/DWCT/Papia Mam/Cancer/GitHub/Cancer_Project_BMU/RUN/HNSCC/R/TCGA_HNSC")
# Install TCGAbiolinks
if (!requireNamespace("BiocManager")) install.packages("BiocManager")
BiocManager::install("TCGAbiolinks")
library(TCGAbiolinks)
# Query TCGA-HNSC RNA-Seq (HTSeq raw counts)
query <- GDCquery(
project = "TCGA-HNSC",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "HTSeq - Counts"
)
# 2. Query the TCGA-HNSC RNA-seq data (STAR - Counts)
query <- GDCquery(
project = "TCGA-HNSC",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "STAR - Counts"
)
# 3. Download the data
GDCdownload(query)
GDCdownload(query, files.per.chunk = 20)
# Run this in R to delete corrupted chunk
unlink("Fri_Jun_20_23_31_14_2025_14.tar.gz")
GDCdownload(query, files.per.chunk = 20)
# 4. Prepare the expression data (creates a SummarizedExperiment object)
data <- GDCprepare(query)
View(data)
# 5. Extract the counts matrix
counts <- assay(data)
# Load the package
library(SummarizedExperiment)
# Now you can extract the count matrix
counts <- assay(data)
# 5. Extract the counts matrix
counts <- assay(data)
View(counts)
# 6. Save to CSV (optional)
write.csv(counts, file = "TCGA_HNSC_STAR_Counts.csv")
# 2. Extract gene symbols (usually in rowData)
gene_symbols <- rowData(data)$external_gene_name
# 3. Combine gene symbols with counts matrix
counts_df <- as.data.frame(counts)
# Add gene symbols as a new column
counts_df$Gene_Symbol <- gene_symbols
# Optionally move Gene_Symbol to first column
counts_df <- counts_df[, c(ncol(counts_df), 1:(ncol(counts_df) - 1))]
View(counts_df)
View(output_df)
View(counts_df)
# This gives you metadata for each sample (columns of the count matrix)
metadata <- colData(data)
# View first few columns of metadata
head(metadata)
# Save to CSV (optional)
write.csv(as.data.frame(metadata), "TCGA_HNSC_Metadata.csv")
# Convert metadata to a data.frame
metadata_df <- as.data.frame(colData(data))
# Identify list columns
is_list_col <- sapply(metadata_df, is.list)
# Convert list columns to character (collapse multiple values if needed)
metadata_df[is_list_col] <- lapply(metadata_df[is_list_col], function(col) {
sapply(col, function(x) paste(as.character(x), collapse = "; "))
})
# Write to CSV
write.csv(metadata_df, "TCGA_HNSC_Metadata.csv", row.names = TRUE)
if (!requireNamespace("ExpressionAtlas", quietly = TRUE)) {
BiocManager::install("ExpressionAtlas")
}
library(ExpressionAtlas)
# Download experiment data directly:
expt <- getAtlasExperiment("E-MTAB-13725")
library(ExpressionAtlas)
# Download experiment data directly:
expt <- getAtlasExperiment("E-MTAB-13725")
# Try downloading via getAtlasData
expts <- getAtlasData(c("E-MTAB-13725"))
# Load library
suppressMessages(library(ExpressionAtlas))
# Try downloading data via getAtlasData
expt_list <- getAtlasData("E-MTAB-13725")
# Inspect available data
names(expt_list)
# If RNA-seq experiment exists, extract it
if (!is.null(expt_list[["E-MTAB-13725"]]$rnaseq)) {
sumexp <- expt_list[["E-MTAB-13725"]]$rnaseq
# Raw counts
counts_raw <- assays(sumexp)$counts
print(dim(counts_raw))
print(head(counts_raw))
# Sample metadata
sample_meta <- colData(sumexp)
print(head(sample_meta))
# Extra metadata
print(metadata(sumexp))
} else {
cat("No RNA-seq object found in experiment list.\n")
}
if (!requireNamespace("ArrayExpress", quietly = TRUE)) {
BiocManager::install("ArrayExpress")
}
library(ArrayExpress)
if (!requireNamespace("ArrayExpress", quietly = TRUE)) {
BiocManager::install("ArrayExpress")
}
library(ArrayExpress)
# Download all available processed data
getAE("E-MTAB-13725", type = "processed", path = ".", extract = TRUE)
# Then read the files (you might need to adjust file names)
counts <- read.delim("E-MTAB-13725.raw_counts.txt", row.names = 1)
setwd("E:/DWCT/Papia Mam/Cancer/GitHub/Cancer_Project_BMU/RUN/HNSCC/R/E-MTAB-13725")
# Load required packages
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
# Define the path to the folder containing _quant.txt files
quant_dir <- "E:/DWCT/Papia Mam/Cancer/GitHub/Cancer_Project_BMU/RUN/HNSCC/R/E-MTAB-13725"
# List all quant files
quant_files <- list.files(path = quant_dir, pattern = "_quant.txt$", full.names = TRUE)
# Function to read and rename count column to sample name
read_quant <- function(file) {
sample_id <- gsub("_quant.txt", "", basename(file))  # Extract sample name
df <- read.delim(file, header = TRUE)
df <- df[, 1:2]  # Assuming first column is GeneID, second is Count
colnames(df) <- c("GeneID", sample_id)
return(df)
}
# Merge all quant files by GeneID
combined_counts <- reduce(lapply(quant_files, read_quant), full_join, by = "GeneID")
# Set row names and remove GeneID column
rownames(combined_counts) <- combined_counts$GeneID
combined_counts <- combined_counts[, -1]
View(combined_counts)
install.packages("tidyverse")
library(tidyverse)
# Define the path to the folder containing _quant.txt files
install.packages("tidyverse")
# View first few rows
head(combined_counts)
# Define your quant directory
quant_dir <- "E:/DWCT/Papia Mam/Cancer/GitHub/Cancer_Project_BMU/RUN/HNSCC/R/E-MTAB-13725"
# List all quant files
quant_files <- list.files(path = quant_dir, pattern = "_quant.txt$", full.names = TRUE)
# Function to read file and extract gene symbol from the complex ID
read_quant <- function(file) {
sample_id <- gsub("_quant.txt", "", basename(file))
df <- read.delim(file, header = TRUE)
# Separate the complex annotation into multiple fields
df <- df %>%
separate(1, into = paste0("V", 1:9), sep = "\\|", fill = "right") %>%
select(GeneSymbol = V6, Count = 2)  # use V2 for Ensembl ID instead of V6 if preferred
df <- df %>%
group_by(GeneSymbol) %>%
summarise(!!sample_id := sum(as.numeric(Count)), .groups = "drop")
return(df)
}
# Read and merge all quant files by gene symbol
combined_counts <- reduce(lapply(quant_files, read_quant), full_join, by = "GeneSymbol")
# Set row names and remove GeneSymbol column
rownames(combined_counts) <- combined_counts$GeneSymbol
# Define path
quant_dir <- "E:/DWCT/Papia Mam/Cancer/GitHub/Cancer_Project_BMU/RUN/HNSCC/R/E-MTAB-13725"
quant_files <- list.files(path = quant_dir, pattern = "_quant.txt$", full.names = TRUE)
# Function to read and extract gene symbol
read_quant <- function(file) {
sample_id <- gsub("_quant.txt", "", basename(file))
df <- read.delim(file, header = TRUE)
# Safely separate the first column
df <- df %>%
separate(1, into = paste0("V", 1:9), sep = "\\|", fill = "right") %>%
select(GeneSymbol = V6, Count = 2) %>%
filter(!is.na(GeneSymbol) & GeneSymbol != "") %>%
group_by(GeneSymbol) %>%
summarise(!!sample_id := sum(as.numeric(Count)), .groups = "drop")
return(df)
}
# Merge all
combined_counts <- reduce(lapply(quant_files, read_quant), full_join, by = "GeneSymbol")
# Remove rows with NA gene symbols
combined_counts <- combined_counts %>% filter(!is.na(GeneSymbol) & GeneSymbol != "")
# Convert to data frame and set rownames safely
combined_counts_df <- as.data.frame(combined_counts)
rownames(combined_counts_df) <- combined_counts_df$GeneSymbol
combined_counts_df <- combined_counts_df[, -1]  # remove GeneSymbol column
View(combined_counts_df)
# Preview
head(combined_counts_df)
library(ArrayExpress)
# Download all available processed data
getAE("E-MTAB-13725", type = "processed", path = ".", extract = TRUE)
# Then read the files (you might need to adjust file names)
counts <- read.delim("E-MTAB-13725.raw_counts.txt", row.names = 1)
library(tidyverse)
quant_dir <- "E:/DWCT/Papia Mam/Cancer/GitHub/Cancer_Project_BMU/RUN/HNSCC/R/E-MTAB-13725"
quant_files <- list.files(path = quant_dir, pattern = "_quant.txt$", full.names = TRUE)
read_quant <- function(file) {
sample_id <- gsub("_quant.txt", "", basename(file))
df <- read.delim(file, header = TRUE)
# Use Ensembl Gene ID (V2)
df <- df %>%
separate(1, into = paste0("V", 1:9), sep = "\\|", fill = "right") %>%
select(GeneID = V2, Count = 2) %>%
filter(!is.na(GeneID) & GeneID != "") %>%
group_by(GeneID) %>%
summarise(!!sample_id := sum(as.numeric(Count)), .groups = "drop")
return(df)
}
# Merge using Ensembl IDs
combined_counts <- reduce(lapply(quant_files, read_quant), full_join, by = "GeneID")
# Filter out missing IDs
combined_counts <- combined_counts %>% filter(!is.na(GeneID) & GeneID != "")
# Convert and set rownames
combined_counts_df <- as.data.frame(combined_counts)
rownames(combined_counts_df) <- combined_counts_df$GeneID
combined_counts_df <- combined_counts_df[, -1]
# Save to CSV
write.csv(combined_counts_df, file = file.path(quant_dir, "combined_ensembl_counts.csv"))
# Preview
head(combined_counts_df)
# 1. Install required packages if not already
if (!requireNamespace("tximport", quietly=TRUE)) {
install.packages("tximport")
}
if (!requireNamespace("readr", quietly=TRUE)) {
install.packages("readr")
}
library(tximport)
# Step 1: Install BiocManager if not already installed
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
# Step 2: Install tximport from Bioconductor
BiocManager::install("tximport")
# Step 3: Load the package
library(tximport)
# 2. Define paths to your quant files
quant_dir <- "E:/DWCT/Papia Mam/Cancer/GitHub/Cancer_Project_BMU/RUN/HNSCC/R/E-MTAB-13725"
samples <- list.files(path = quant_dir, pattern = "_quant.txt$", full.names = TRUE)
# 3. Create a named vector: sample name → file path
names(samples) <- gsub("_quant.txt", "", basename(samples))
# 4. Extract mapping: transcript → gene (from one file)
tx2gene <- read_tsv(samples[[1]], col_names = TRUE) |>
separate(Name, into = paste0("V", 1:9), sep = "\\|", fill = "right") |>
dplyr::select(transcript = V1, gene = V2) |>
dplyr::filter(!is.na(gene) & !is.na(transcript)) |>
distinct()
# 5. Import counts and summarize to gene level
txi <- tximport(files = samples,
type = "salmon",
tx2gene = tx2gene,
countsFromAbundance = "no", # or "lengthScaledTPM"
ignoreTxVersion = FALSE)
library(tximport)
library(readr)
library(tidyverse)
# Step 1: Your quant file directory
quant_dir <- "E:/DWCT/Papia Mam/Cancer/GitHub/Cancer_Project_BMU/RUN/HNSCC/R/E-MTAB-13725"
quant_files <- list.files(path = quant_dir, pattern = "_quant.txt$", full.names = TRUE)
names(quant_files) <- gsub("_quant.txt", "", basename(quant_files))
# Step 2: Make tx2gene mapping (only transcript ID & gene ID)
tx2gene <- read_tsv(quant_files[[1]], col_types = cols()) |>
mutate(Name_clean = sapply(strsplit(Name, "\\|"), `[`, 1),
GeneID = sapply(strsplit(Name, "\\|"), `[`, 2)) |>
dplyr::select(Name_clean, GeneID) |>
distinct()
# Rename columns for tximport
colnames(tx2gene) <- c("TXNAME", "GENEID")
# Step 3: Run tximport
txi <- tximport(files = quant_files,
type = "salmon",
tx2gene = tx2gene,
txOut = FALSE,  # summarize to gene level
ignoreTxVersion = FALSE,
countsFromAbundance = "no")
# Check first few rows of 'Name' column from a quant file
raw_check <- read_tsv(quant_files[[1]], col_types = cols())
head(raw_check$Name)
library(tximport)
library(readr)
library(tidyverse)
# 1. Define your file directory
quant_dir <- "E:/DWCT/Papia Mam/Cancer/GitHub/Cancer_Project_BMU/RUN/HNSCC/R/E-MTAB-13725"
# 2. List all _quant.txt files and name them by sample
quant_files <- list.files(path = quant_dir, pattern = "_quant.txt$", full.names = TRUE)
names(quant_files) <- gsub("_quant.txt", "", basename(quant_files))
# 3. Build tx2gene mapping (from one representative file)
example_quant <- read_tsv(quant_files[[1]], col_types = cols())
# Extract clean transcript and gene IDs
tx2gene <- example_quant %>%
transmute(
TXNAME = sapply(strsplit(Name, "\\|"), `[`, 1),   # e.g., ENST00000423372.3
GENEID = sapply(strsplit(Name, "\\|"), `[`, 2)    # e.g., ENSG00000237683.5
) %>%
filter(!is.na(TXNAME), !is.na(GENEID)) %>%
distinct()
# 5. Run tximport
txi <- tximport(files = quant_files,
type = "salmon",
tx2gene = tx2gene,
countsFromAbundance = "no",  # you can change to "lengthScaledTPM" if needed
txOut = FALSE,
ignoreTxVersion = FALSE)     # set TRUE if you removed .x versions above
library(readr)
library(dplyr)
library(stringr)
library(tximport)
# Define paths
quant_dir <- "E:/DWCT/Papia Mam/Cancer/GitHub/Cancer_Project_BMU/RUN/HNSCC/R/E-MTAB-13725"
quant_files <- list.files(quant_dir, pattern = "_quant.txt$", full.names = TRUE)
sample_names <- gsub("_quant.txt", "", basename(quant_files))
# Create a new folder for cleaned quant files
clean_dir <- file.path(quant_dir, "cleaned")
dir.create(clean_dir, showWarnings = FALSE)
# Step 1: Clean all quant files (extract ENST as 'Name')
cleaned_files <- c()
for (i in seq_along(quant_files)) {
raw <- read_tsv(quant_files[i], col_types = cols())
# Extract only ENST ID
raw$Name <- sapply(strsplit(raw$Name, "\\|"), `[`, 1)
# Save cleaned file
clean_path <- file.path(clean_dir, paste0(sample_names[i], "_quant_clean.txt"))
write_tsv(raw, clean_path)
cleaned_files[i] <- clean_path
}
names(cleaned_files) <- sample_names
# Step 2: Build tx2gene mapping from first cleaned file
first_clean <- read_tsv(cleaned_files[1], col_types = cols())
original <- read_tsv(quant_files[1], col_types = cols())
tx2gene <- tibble(
TXNAME = sapply(strsplit(original$Name, "\\|"), `[`, 1),
GENEID = sapply(strsplit(original$Name, "\\|"), `[`, 2)
) %>% distinct()
# Step 3: tximport with cleaned files
txi <- tximport(
files = cleaned_files,
type = "salmon",
tx2gene = tx2gene,
countsFromAbundance = "no",
txOut = FALSE,
ignoreTxVersion = FALSE
)
